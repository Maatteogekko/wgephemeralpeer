// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: internal/grpc/ephemeralpeer.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EphemeralPeerClient is the client API for EphemeralPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EphemeralPeerClient interface {
	RegisterPeerV1(ctx context.Context, in *EphemeralPeerRequestV1, opts ...grpc.CallOption) (*EphemeralPeerResponseV1, error)
}

type ephemeralPeerClient struct {
	cc grpc.ClientConnInterface
}

func NewEphemeralPeerClient(cc grpc.ClientConnInterface) EphemeralPeerClient {
	return &ephemeralPeerClient{cc}
}

func (c *ephemeralPeerClient) RegisterPeerV1(ctx context.Context, in *EphemeralPeerRequestV1, opts ...grpc.CallOption) (*EphemeralPeerResponseV1, error) {
	out := new(EphemeralPeerResponseV1)
	err := c.cc.Invoke(ctx, "/ephemeralpeer.EphemeralPeer/RegisterPeerV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EphemeralPeerServer is the server API for EphemeralPeer service.
// All implementations must embed UnimplementedEphemeralPeerServer
// for forward compatibility
type EphemeralPeerServer interface {
	RegisterPeerV1(context.Context, *EphemeralPeerRequestV1) (*EphemeralPeerResponseV1, error)
	mustEmbedUnimplementedEphemeralPeerServer()
}

// UnimplementedEphemeralPeerServer must be embedded to have forward compatible implementations.
type UnimplementedEphemeralPeerServer struct {
}

func (UnimplementedEphemeralPeerServer) RegisterPeerV1(context.Context, *EphemeralPeerRequestV1) (*EphemeralPeerResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeerV1 not implemented")
}
func (UnimplementedEphemeralPeerServer) mustEmbedUnimplementedEphemeralPeerServer() {}

// UnsafeEphemeralPeerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EphemeralPeerServer will
// result in compilation errors.
type UnsafeEphemeralPeerServer interface {
	mustEmbedUnimplementedEphemeralPeerServer()
}

func RegisterEphemeralPeerServer(s grpc.ServiceRegistrar, srv EphemeralPeerServer) {
	s.RegisterService(&EphemeralPeer_ServiceDesc, srv)
}

func _EphemeralPeer_RegisterPeerV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EphemeralPeerRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EphemeralPeerServer).RegisterPeerV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ephemeralpeer.EphemeralPeer/RegisterPeerV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EphemeralPeerServer).RegisterPeerV1(ctx, req.(*EphemeralPeerRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// EphemeralPeer_ServiceDesc is the grpc.ServiceDesc for EphemeralPeer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EphemeralPeer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ephemeralpeer.EphemeralPeer",
	HandlerType: (*EphemeralPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeerV1",
			Handler:    _EphemeralPeer_RegisterPeerV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/ephemeralpeer.proto",
}
